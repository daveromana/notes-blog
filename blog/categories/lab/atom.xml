<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lab | learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/blog/categories/lab/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2015-01-01T02:19:53+05:30</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[program loading and memory mapping]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/15/program-loading-and-memory-mapping/"/>
    <updated>2014-10-15T02:10:27+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/15/program-loading-and-memory-mapping</id>
    <content type="html"><![CDATA[<h2><code>arch_prctl(ARCH_SET_FS, addr)</code></h2>

<p>From man page:</p>

<blockquote><p>set architecture specific thread state</p></blockquote>

<ul>
<li><p><code>ARCH_SET_FS</code>: set the 64-bit base address for the <code>FS</code> register to <code>addr</code></p>

<p>  Earlier kernel used to store an array indexed by threadid containing address of thread space, however now it sets the FS register for threads local storate.
  <code>GS</code> is used for kernel threads storage pointer whereas <code>FS</code> is used for userspace threads.</p></li>
</ul>


<!--more-->


<h2>ELF Format:</h2>

<h2>Creating the memory image of a new process</h2>

<p>sys_execve is responsible for setting up the environment for running the program. Below are the steps taken by sys_execve which calls do_execve_common:</p>

<ol>
<li>Check that <code>NPROC</code> limit is not exceeded (i.e.,total number of process), if it is then exit.(<code>L:1443</code>)</li>
<li>Allocate memory for data structure in kernel.(<code>L:1458</code>)</li>
<li>Open the exec file using <code>do_open_exec</code>(<code>L:1469</code>)</li>
<li>Now the kernel data structures are initialized and <code>exec_binprm</code> is called.</li>
<li><p><code>exec_binprm</code> calls <code>search_binary_handler</code> which finds the binary format handler, in our case elf. So it finds load_elf_binary. (fs/binfmt_elf.c L:84 and 571)</p>

<ul>
<li><code>load_elf_binary</code> does consistency checks by making sure that itâ€™s an ELF format file by comparing the main number and ELF in <code>e_ident</code> field in header.</li>
<li><code>load_elf_binary</code> reads the header information and looks for <code>PT_INTERP</code> segment to see if an inter- preter was specified. This segment is only present for dynamically linked programs and not for statically linked.</li>
<li>Now all the loadable segments are mmapped into memory, by reading the ELF Program headers. <code>bss</code> segment is also mapped.</li>
<li><code>create_elf_tables</code> creates a stack at a random offset and sets the auxiliary vectors, arguments and environments according to the standard.</li>
<li>Finallythecontrolistransferredtoe_entrypointusingstart_threadmethod.(<code>fs/binfmt_elf.cL:990</code>)</li>
</ul>
</li>
</ol>


<p><img src="/images/post-images/elf.png"/>
source: Professional Linux Kernel Architecture</p>

<p><img src="/images/post-images/elf2.png"/>
source: stackoverflow.com</p>

<h2>Change the .text entry address in ELF</h2>

<pre><code>gcc test1.c -o test1.out -Wl,-Ttext-segment=0x2000000 -static
</code></pre>

<p><a href="http://stackoverflow.com/questions/8116648/why-is-the-elf-entry-point-0x8048000-not-changeable?lq=1">http://stackoverflow.com/questions/8116648/why-is-the-elf-entry-point-0x8048000-not-changeable?lq=1</a></p>

<h1>entry point vs Load Address</h1>

<p>First LOAD specifies the program code in the file.
start(glibc) is the entry point and not the address in LOAD.</p>

<pre><code>start -&gt; init -&gt; main
</code></pre>

<h2>Stack Growth</h2>

<p><img src="http://i.imgur.com/ynPxqhZ.png?2"/></p>

<h2>Links for ELF</h2>

<ol>
<li><a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">http://www.skyfree.org/linux/references/ELF_Format.pdf</a></li>
<li><a href="http://articles.manugarg.com/aboutelfauxiliaryvectors.html">http://articles.manugarg.com/aboutelfauxiliaryvectors.html</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
