<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2015-01-01T02:19:53+05:30</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[process address space]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space/"/>
    <updated>2014-10-16T05:10:53+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space</id>
    <content type="html"><![CDATA[<ul>
<li>On IA-32 systems with 2<sup>32</sup> = 4GiB, the address space is usually split in 3:1 ratio. The kernel is assied 1GiB, while 3GiB is available to each userspace process.</li>
<li>The contents of kernel address space are always same regardless of which user process is active.</li>
</ul>


<h2>Layout of the Process Address Space</h2>

<ol>
<li><strong>text segment</strong>: binary code of the code currently running.</li>
<li>code for dynamic libraries.</li>
<li>heap where global variables and dynamically generated data are stored.</li>
<li>stack used to store local variables and to implement function calls.</li>
<li>Sections with environment variables and command-line arguments.</li>
<li>Memory mappings that map the contents of files into the virtual address space.</li>
</ol>


<p>Each process has <code>mm_struct</code> instance that can be accessed by task structure.</p>
]]></content>
  </entry>
  
</feed>
