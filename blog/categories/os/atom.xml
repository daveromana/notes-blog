<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os | learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2014-09-05T03:13:25-05:00</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[basic os concepts]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/04/basic-os-concepts/"/>
    <updated>2014-09-04T21:08:52-05:00</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/04/basic-os-concepts</id>
    <content type="html"><![CDATA[<h3>Memory Allocation/Memory Management</h3>

<blockquote><p>Act of managing computer memory. Essential requirement is to provide ways to dynamically allocate memory to programs at their request and free when not needed.</p></blockquote>

<ol>
<li><strong>Memory Pools/Fixed-size block allocation</strong>: uses a free list of often same size block of memory and allocates on request. This works well for embedded systems.</li>
<li><strong>buddy blocks</strong>: In this system memory is allocated from several blocks instead of just one. Memory pools often represent blocks of size of power 2. When a certain size of memory is requested, the pool with minimum size meeting the requirements is used to allocate memory. If no such block is present, a block from higher pool is broken into smaller blocks and then memory is allocated.</li>
</ol>


<h3>Fragmentation</h3>

<blockquote><p>Three types: External, Internal and Data fragmentation</p></blockquote>

<p>Since the memory is often assigned in blocks of power 2, there would be a waste of memory either internally or externally. Overtime while memory is getting allocated and released, there will holes in between. If there are holes outside the allocated area, it&rsquo;s called external fragmentation and if there are holes inside the allocated area it&rsquo;s called internal fragmentation.
Data fragmentation occurs when a collection of data in memory is broken into pieces that are not closed together. For example, a file that is not able to fit in contiguous memory.</p>

<h3>Translation look-aside buffer (TLB)</h3>

<p>A cache that <strong>Memory Management Unit</strong> uses to improve virtual address translation speed.</p>

<p>Virtual memory is the space seen from a process. The page table keeps track of where the virtual pages are stored in the physical memory. The TLB is implemented as CAM (content addressable memory). CAM key is virtual address and search result is the physical address. If there&rsquo;s a miss in TLB, translation proceeds by <strong>page walk</strong>.</p>

<h3>Interrupt</h3>

<p>Interrupt is a signal to the processor emitted by software or hardware indicating an event that needs immediate attention. The processor responds by suspending its current activities, saving its state and executing a function called interrupt handler (or interrupt service routine, ISR).</p>

<p><strong>Hardware Interrupts</strong> are used by devices to communicate that they require special attention. Internally they are generated by sending alerting signals to the processors. Basically give each device a wire (interrupt line) that it can use to signal processor. Hardware interrupts are <strong>asynchronous</strong>.</p>

<p><strong>Software Interrupts</strong> is cause either by an exceptional condition in the processor itself or a special instruction in the instruction set which causes an interrupt when executed. The former is often called a <strong>trap</strong> (<strong>Divide by 0 causes trap</strong>)
Special instruction is used to interrupt to request services from low level system software such as device drivers. Software interrupts are often used to implement system calls.</p>

<p><img class="<a" src="href="http://i.imgur.com/cBhat6K.png">http://i.imgur.com/cBhat6K.png</a>&#8221;></p>

<p>Several ways to implement interrupts. Could be implemented using a active wire (level triggered, high or low), edge triggered, message signaled, Doorbell <a href="http://en.wikipedia.org/wiki/Interrupt">wiki link</a>.</p>

<h3>Distributed Shared Memory</h3>

<p>Physically separate memories can be addressed globally. Two processors with same address will point to same memory address. Can be implemented at OS level or library level.</p>

<h4>Stateful and stateless servers</h4>

<p>A stateful server remembers client data from previous request whereas stateless server doesn&rsquo;t.</p>

<p>State may refer to any information related to client like whether the file is open, or being modified or cached data on client etc.</p>

<p>NFS is a stateless system.
- Each request must be complete since no state is stored - the file has to fully identified and any offsets specified.
- if a server crashes and then recovers, no info was lost since it&rsquo;s stateless. higher degree of fault tolerence.
- no server overhead for storing client information, and server doesn&rsquo;t get affected if client crashes.</p>

<p>AFS is stateful System
- Requests are shorter
- cache coherence is possible; server can know which clients are caching which blocks of a file.
- File locking is possible; server can maintain that certain client is locking a file.
- server returns an identifier to client creating a session and keeps track of open files. It is required to maintain state if providing unix file semantics.</p>

<h4>Difference between stateful and stateless file systems</h4>

<ul>
<li>Failure Recovery:

<ul>
<li>A stateful server loses all its valatile state in a crash. Server needs to be aware of client failure to reclaim memory.</li>
</ul>
</li>
<li>Slow processing and longer request messages in case of stateless systems. Difficult to provide unix file semantics.</li>
<li>A server employing server-iniitiated cache needs to have state to validate cache.</li>
<li>UNIX use of file descriptors and implicit offsets is inherently stateful. servers must maintain tables to map file descriptors to inodes and store current offset within file.</li>
</ul>


<p><a href="http://www.cs.gmu.edu/~setia/cs571-F02/slides/lec9.pdf">Detailed Info</a></p>

<h3>Swapping</h3>

<p>When all the process in a multiprogrammed CPU are not able reside in memory at the same time, some of the process that are not scheduled currently or are blocked are transferred to secondary memory. This dynamic moving of process between memotu and disk is called swapping.</p>

<h3>Inverted Page Table</h3>
]]></content>
  </entry>
  
</feed>
