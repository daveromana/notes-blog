<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os | learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2015-01-01T02:19:53+05:30</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concurrent Objects]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/18/concurrent-objects/"/>
    <updated>2014-11-18T06:10:16+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/18/concurrent-objects</id>
    <content type="html"><![CDATA[<p>Method calls take time whereas method calls by a single thread are always sequential.</p>

<h3>Compositional</h3>

<p>A correctness property P is compositional if, whenever each object in system satisfies P, the system as a whole satisifies P. Basically we can compose objects satisfying a property P to create a more complex system that also satisfies P. For example, Quiescence.</p>

<hr />

<h3>Quiescent Consistency</h3>

<p>Principles:</p>

<ol>
<li>Method calls should appear in one-in-a-time sequential order. &ndash;| <strong>trivial</strong> |</li>
<li>Method calls separated by a period of quiescence should appear to take effect in real-time order.</li>
</ol>


<pre><code># not quiescent

Thread A --------------------|    r.write(7)    |----------------------------------------&gt;

Thread B ---------------------- |  r.write(-3)    |-----------| r.read(-7) |-------------&gt;

---------------------------------------------------- ******* -----------------------------

****** period of quiescence
</code></pre>

<ol>
<li>Property one ensures that we read a valid value. However one can read the old value always.</li>
<li>So in the above example, we should either read 7 or 3 since there&rsquo;s a period of quiescence</li>
</ol>


<p>Informally,</p>

<ul>
<li>it says that any time an object becomes quiescent, then the execution so far is equivalent to some sequential execution of the completed calls.</li>
<li>all operations appear to occur in some sequential order</li>
<li>non-overlapping operations appear to occur in real-time order.</li>
<li>Program order may not be preserved. I enque x and then y; deque operation overlaps both enqueues, you can come up with y.</li>
</ul>


<pre><code># program order not preserved. Since no period of quiescence. But this is Quiescent Consistent.

Thread A --------------------|    r.enq(7)  |-------|  r.enq(-3)-----------------------&gt;

Thread B ------------------------------|   r.deq(-3)    |------------------------------&gt;
</code></pre>

<h4>Properties</h4>

<ul>
<li>non blocking</li>
<li>compositional</li>
<li>doesn&rsquo;t respect the program order</li>
<li>Quiescenly consistent with time</li>
<li>Cannot touch multiple objects.</li>
<li>equivalent to sequential order</li>
</ul>


<hr />

<h3>Sequential Consistency</h3>

<p>Principles:</p>

<ol>
<li>Method calls should appear to take effect in program order.</li>
<li><p>Method calls should appear in one-in-a-time sequential order. &ndash;| <strong>trivial</strong> |</p></li>
<li><p>consistent with program order</p></li>
<li>meet the object&rsquo;s sequential specification</li>
</ol>


<hr />

<h2>Linearizability and sequential consistency</h2>

<p>Linearizability: methods all at-a-time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spanner: Google's Globally Distributed Database]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/07/spanner-googles-globally-distributed-database/"/>
    <updated>2014-11-07T06:17:50+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/07/spanner-googles-globally-distributed-database</id>
    <content type="html"><![CDATA[<p><strong>Spanner</strong>: Database that shards data across many set of Paxos state machines in data centers spread accross the world.</p>

<h3>Time API</h3>

<p>Sawtooth peak when executing, comes back when synced from server.</p>

<p>Smax: largest timestamp till relpica is up to date.</p>

<h3>Leases</h3>

<p>leaders participate in local and distributed transactions. So it&rsquo;s better to have leaders for long time. Auto released after expiration.</p>

<p>extend the lease:
- leader can ssign timestamp to lease in future.
- leader can try to extend it&rsquo;s lease to make sure it&rsquo;s present when transaction happens.</p>

<h3>Snapshot isolation: all reads satisfied from the image.</h3>

<ul>
<li>not as strong as strict serializability.</li>
<li>supported using Tsafe -> time when you don&rsquo;t have prepare transactions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[map reduce]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/07/map-reduce/"/>
    <updated>2014-11-07T00:01:15+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/07/map-reduce</id>
    <content type="html"><![CDATA[<p><strong>map</strong>: processes a key/value pair to generate a set of intermediate key/value pairs.</p>

<p><strong>reduce</strong>: merges all intermediate values associated with same intermediate keys.</p>

<pre><code>map    (k1, v1)       -&gt; list(k2, v2)
reduce (k2, list(v2)) -&gt; list(v2)
</code></pre>

<p>All the mappers have to finish before reduces can end.</p>

<!--more-->


<p><img class="<a" src="href="http://i.imgur.com/At7gcgY.png?1">http://i.imgur.com/At7gcgY.png?1</a>&#8221;></p>

<ul>
<li>Mappers based on input sets</li>
<li>Reduces based on number of output files</li>
<li>Potentially less robust, you lose type information from map to reduce. Possibility of garbage values.</li>
<li>Mappers read from GFS but write to local file system. Since it&rsquo;s faster to write locally.</li>
<li>Reducers again write to GFS.</li>
</ul>


<h3>Criticism</h3>

<ul>
<li>Step backwards in programming paradigm.

<ul>
<li>schemas are good.</li>
</ul>
</li>
<li>Consistency model. Garbage values can creep in.</li>
<li>No query language.</li>
<li>More on the database side of the map-reduce.</li>
<li>No indexes are used.</li>
<li>Skew is the real problem.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[concurrency]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/23/concurrency/"/>
    <updated>2014-10-23T23:08:21+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/23/concurrency</id>
    <content type="html"><![CDATA[<ul>
<li>Determinism doesn&rsquo;t effectively solves the problem.</li>
<li>Symbolic execution</li>
</ul>


<h2>Transactions and Concurrency</h2>

<h1>ACID</h1>

<p><strong>Atomicity:</strong> All or nothing. Log to clean if system fails. Output commit -> you are screwed.
<strong>Consistency:</strong> Internal consistency of the database.
<strong>Isolation:</strong> Executes if it were running along.
<strong>Durability:</strong> Results will not be lost.</p>

<p>Memory Transactions: no guarantee, what if power goes down.</p>

<hr />

<p>Isolation: some serial execution this is equivalent to.
Serializability: One approach to isolation - not dominant. Linearizability is dominant.</p>

<p>Transactions: 2-phase commit, 2-phase locking.</p>

<p>Serializability allows you to opearte on multiple objects.</p>

<p>Serializability and Sequential consistency might not correspond to real time order.
database - serializability. memory system: read/write.</p>

<p>composable: consisten with real time and doesn&rsquo;t touch multiple objects.</p>

<p>Single write gets broken into multiple writes inside kernel. Single write is not serializable</p>

<p><a href="http://www.cs.rochester.edu/courses/254/fall2013/notes/12-concurrency">http://www.cs.rochester.edu/courses/254/fall2013/notes/12-concurrency</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[process address space]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space/"/>
    <updated>2014-10-16T05:10:53+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space</id>
    <content type="html"><![CDATA[<ul>
<li>On IA-32 systems with 2<sup>32</sup> = 4GiB, the address space is usually split in 3:1 ratio. The kernel is assied 1GiB, while 3GiB is available to each userspace process.</li>
<li>The contents of kernel address space are always same regardless of which user process is active.</li>
</ul>


<h2>Layout of the Process Address Space</h2>

<ol>
<li><strong>text segment</strong>: binary code of the code currently running.</li>
<li>code for dynamic libraries.</li>
<li>heap where global variables and dynamically generated data are stored.</li>
<li>stack used to store local variables and to implement function calls.</li>
<li>Sections with environment variables and command-line arguments.</li>
<li>Memory mappings that map the contents of files into the virtual address space.</li>
</ol>


<p>Each process has <code>mm_struct</code> instance that can be accessed by task structure.</p>
]]></content>
  </entry>
  
</feed>
