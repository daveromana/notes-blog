<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: filesystem | learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/blog/categories/filesystem/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2015-01-01T02:19:53+05:30</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google File System]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/09/google-file-system/"/>
    <updated>2014-10-09T23:07:40+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/09/google-file-system</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/gfs-sosp2003.pdf">http://static.googleusercontent.com/media/research.google.com/en/us/archive/gfs-sosp2003.pdf</a> <br/>
Published: 2003</p>

<hr />

<h2>Design Constraints</h2>

<ol>
<li>Component failures are the norm rather than exception. FS consists of thousands if commodity parts and is accessed by comparable number of clients.</li>
<li>Files are huge by traditional standards. Multi-GB files are common. Billions of approximately KB-sized files.</li>
<li>Most files are mutated by appending new data rather than overwriting existing data.</li>
<li>Co-designing the applications and the file system API benifits the overall system by increasing flexibility.</li>
</ol>


<h2>Architecture</h2>

<p>GFS consists of a <strong>single master</strong> and multiple <strong>chunkservers</strong> and is accessed by multiple clients.</p>

<h2>Class Notes:</h2>

<p>Problem in datacenters: failures.</p>

<p><strong>Master</strong>: Single point of failure, master has log of operations.</p>

<p>Lease: soft state.</p>

<p>Revoke:</p>

<ol>
<li>wait</li>
<li>contact server</li>
</ol>


<hr />

<p>Snapshot:</p>

<ol>
<li>revoke lease</li>
<li>copy-on-write</li>
</ol>


<p>snapshot on large files:-> copy on writes.</p>

<p>Contact replicas and tell them to make local copies. Update the metadata to point to the individual chunks.</p>

<ul>
<li>distributed the consistency to both application libraries.</li>
<li>unique identifier could be a problem.</li>
</ul>


<p>chunks metadata at master are not persisted.</p>

<p>Appends are ordered:</p>

<p>1) lease and primary
2) primary serial #&rsquo;s</p>

<p>Master doesn&rsquo;t know about the namespaces either, it is also stored on chunkservers.</p>

<ul>
<li>No hardlinks/softlinks</li>
<li>absolute paths</li>
<li>no datastructure representing directories like inodes</li>
<li>no datastructure to enumerate contents of one directory</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log structured file system]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/26/log-structured-file-system/"/>
    <updated>2014-09-26T01:07:15+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/26/log-structured-file-system</id>
    <content type="html"><![CDATA[<p>In LFS, log is the only structure on disk. The log is divided into segments (to maintain space for large files) where data is written sequentially. <strong>segment cleaner</strong> compresses the information from heavily fragmented code.</p>

<ul>
<li>Log also stores indexing information so that the files can be read back with efficiency comparable to current file systems.</li>
</ul>


<p>LFS is based on assumption that files are cached in main memory, so the majority of traffic write traffic which is efficient since we are writing sequentially and eliminating seeks in the disk.</p>

<ul>
<li>Sprite LFS uses 60-75% of the disk bandwith where as unix file system uses about 5-10% since most of the time is spent in seeking.</li>
</ul>


<hr />

<p>The main challenge of LFS is to ensure that there are always large extents of free space available for writing new data. Large extents called <em>segments</em> are used, where segment cleaner continually regenerates empty segments by compressing the live data from heavily fragmented segements.</p>

<blockquote><p>File system is governed by two basic building blocks: technology and workload.</p></blockquote>

<p>Three components that are significant for file system design:</p>

<ol>
<li><strong>Processors</strong>- getting faster and fater, putting more pressure on memory</li>
<li><strong>Main Memory</strong> - Can cache files and change the predominant type of data, like more writes than reads, so you can optimize you FS for writes</li>
<li><strong>Disks</strong> - well that&rsquo;s where you store your data, they have two components:

<ul>
<li>Transfer Bandwith -  can be improved using disk arrays and parallel-head disks.</li>
<li>Access Time - depends on mechanical head (at the time of publishing).</li>
</ul>
</li>
</ol>


<hr />

<ul>
<li>Unix file system writes metadata structures such as directories and inodes synchronously, which is not good for lot of small files.</li>
<li>LFS buffers a sequence of file system changes in the file cache and writes them sequentailly in a single disk operation.</li>
</ul>


<h2>Key Issues</h2>

<ol>
<li>Information Retrieval  - uses inodes and maintains a inode map which contains the location of inodes.</li>
<li>Large free space</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/udev notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/04/slash-udev-notes/"/>
    <updated>2014-09-04T12:43:15+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/04/slash-udev-notes</id>
    <content type="html"><![CDATA[<h3>Problems with <code>/dev</code></h3>

<ol>
<li>A static /dev is unwiedly big. It would be nice to show only /dev enteries for the devices that we acutally have running in the system.</li>
<li>We are running out of major and minor number for devices.</li>
</ol>


<pre><code class="sh">  [vagrant@vagrant-centos64 ~]$ ls -l /dev/sda
  brw-rw---- 1 root disk 8, 0 Aug 14 05:36 /dev/sda

  # shows permissions (brw-rw---- ), owner (root), group (disk), major device number (8), 
    minor device number (0), date (Aug 14), hour (05:36) and device name
</code></pre>

<p>  When accessing a device file, the major device number selects which device driver is being called to perform read/write. Minor number is passed as a parameter and its usage/interpretations depends on the driver.<br/></p>

<ol>
<li>Users want a way to name devices in persistant fashion.</li>
<li>Userspace programs wants to know what devices are created or removed and what /dev entry is associated with them.</li>
</ol>


<h3><code>udev</code></h3>

<p>Presentation on udev: <a href="http://www.kroah.com/linux/talks/ols_2003_udev_talk/mgp00001.html">http://www.kroah.com/linux/talks/ols_2003_udev_talk/mgp00001.html</a></p>

<ol>
<li>the /dev tree is populated only for devices that are currently present in the system.</li>
<li>udev doesn&rsquo;t care about major or minor number schemes.</li>
<li>It provides ability to name devices persistently.</li>
<li>udev emites D-BUS messages so that any userspace program can listen to what devices are created or removed. Userspace programs can also query the database to see what devices are present and what they are currently named.</li>
</ol>


<h3>Dynamic <code>/dev</code></h3>

<p>The content of /dev directory are stored on a temporary file system and all files are render at every system startup. Static files that should always be present in /dev directory can be placed in /lib/udev/devices directory. All the contents of /lib/udev/devices directory are copied to /dev at startup.</p>

<blockquote><p>how does kernel knows which device driver to choose without major or minor device number.</p></blockquote>

<p>The kernel bus drivers probe for devices. For every detected devices kernel creates an internal device structure and sends a uevent to udev deamon. Each devices identifies itself by specially-formatted ID, which tells what kind of device it is. It usually consists of vendor ID, product ID and other subsystem specific values.</p>

<p><code>/etc/udev/rules.d/*.rules</code> contains rules for different devices and <code>udev</code> deamon parses and loads all of them at the startup.</p>

<p>More Info at:
<a href="http://doc.opensuse.org/products/draft/SLES/SLES-admin_sd_draft/cha.udev.html#sec.udev.devdir">http://doc.opensuse.org/products/draft/SLES/SLES-admin_sd_draft/cha.udev.html#sec.udev.devdir</a></p>

<hr/>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Unix Time-Sharing System Notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/03/the-unix-time-sharing-system-notes/"/>
    <updated>2014-09-03T10:49:07+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/03/the-unix-time-sharing-system-notes</id>
    <content type="html"><![CDATA[<p><strong>source</strong>: <a href="http://cm.bell-labs.com/cm/cs/who/dmr/cacm.html">http://cm.bell-labs.com/cm/cs/who/dmr/cacm.html</a><br/>
<strong>published</strong>: ACM 1974</p>

<h3>The File System</h3>

<p>From the user&rsquo;s point of view, three kinds of files:</p>

<ol>
<li><strong>ordinary disk files</strong> - no particular structure expected by system. Structure of files is controlled by programs (object files generated by assembler). Could be binary files or simple text files.</li>
<li><strong>directories</strong> - mapping between the names of files and the files themselves.

<ul>
<li>System maintains several directories for its own use.

<ul>
<li><strong>root directory</strong>: the starting point for other files in the system.</li>
<li>directory that contains commands to be executed. (not required, for convinience since commands can be placed anywhere).</li>
<li>null filename refers to current directory.</li>
</ul>
</li>
<li>A non-directory file may appear in several other directories under different names. - <strong>linking</strong>

<ul>
<li>A directory entry for this file is called a <strong>link</strong></li>
<li><strong>Hard Links</strong>: <code>ln file1 file2</code> - file2 now links to file1. Both file1 and file2 have same status. File doesn&rsquo;t exist in any directory in general, the directory entry contains link between filename and a pointer to the information describing the file.</li>
</ul>
</li>
<li>Each directory has atleast two enteries with name &lsquo;.&rsquo; and &lsquo;..&rsquo; referring to current and parent directories resp.</li>
<li>The directory structure is constrained to have a rooted tree structure.</li>
<li>Cycles are not allowed in the file system. However Kernel mainains two restricted types of cycles in each directory: <code>.</code> and <code>..</code></li>
</ul>
</li>
<li><strong>special files</strong>: Each I/O device supported by UNIX is associated with at least one such file. Special files are read and written just like ordinary files. However, request to these files leads to activation of the associated device. An entry for each special devices exists in <code>/dev</code>.</li>
</ol>


<h3>Removable File Systems</h3>

<p>It is not necessary that the entire file system hierarchy reside on this device.</p>

<p><code>mount</code> causes the heretofore ordinary file to refer instead to the root directory of the file system on the removable volume. In effect, mount replaces a leaf of the hierarchy tree by a whole new subtree.</p>

<ul>
<li>No link may exist between one file system hierarchy and another.</li>
<li><strong>&lsquo;..&rsquo;</strong> refers to the directory itself instead to its parent.</li>
</ul>


<h3>Protection</h3>

<ol>
<li>Each user is assigned a unique user identification number. When a file is created it is marked with the user ID of the owner.</li>
<li>10 bits are used. 9 bits are used for R/W/X for self, group and others.</li>
<li>if the 10th bit is on, the system will temporarily change the user ID to the user ID of the user that created the file.</li>
</ol>


<h3>I/O Calls</h3>

<ol>
<li>There is no distinction between random and sequential I/O, nor is any logical record size imposed by system.</li>
<li>The size of the ordinary file is determined by the highest byte written on it; no predetermination of the size of a file is necessary or possible.</li>
<li>open / create system calls opens / creates file. There are no user-visible locks in the file system, nor is there any restriction on the number of users who may have a file open for reading or writing. The text may be scrambled if multiple users are writing at the same time.</li>
<li>System has sufficient interlocks present internally to maintain the logical consistency of the file system when two users are writing on same file, creating files in the same directory or deleting each other&rsquo;s open files.</li>
</ol>


<h3>Implementation of the File System</h3>

<pre><code>Directory:
  filename -&gt; pointer to file info [called i-number]
</code></pre>

<p>When a file is accessed, it&rsquo;s <strong>i-number</strong> is used as an index into a system table (the <strong>i-list</strong>)</p>

<pre><code>users/myfile

Directory: users
myfile -&gt; 4;

i-list (system table)
0 - i-node1
1 - i-node2
...
4 - i-node4
</code></pre>

<h4>i-node</h4>

<p>Content of i-node:</p>

<ol>
<li>Its owner</li>
<li>Its protection bits</li>
<li>The physical disk or tape address for the file contents.</li>
<li>Its size</li>
<li>Time of last modification</li>
<li>The number of links to the file, that is, the number of times it appears in a directory.</li>
<li>A bit indicating whether the file is a directory</li>
<li>A bit indicating whether the file is a special file</li>
<li>A bit indicating whether the file is &ldquo;large&rdquo; or &ldquo;small&rdquo;</li>
</ol>


<p>The purpose of open/create call is to turn the pathname to i-number by searching the directories. Once a file is open, its device, i-number, and read/write pointer are stored in a system table indexed by the file descriptor return by open or create.</p>

<p>There is a space in i-node for 13 device addresses.</p>

<p>For special files 12 of the 13 devices addresses are ignored and the first specifies an internal device name, which is interpreted as a pair of numbers representing, resp, a device type and subdevice number. Device type -> system routine to deal with I/O on that device and SubDevice number -> selects a disk drive attached to a particular controller.</p>

<p><code>mount</code> system call maintains a system table whose arguments(keys) are (i-number, device name of the ordinary file specied in mount command) and value is device name of the indicated special file. This table is searched for i-number/device pair during an open/create. If the match is found the i-number is replaced by the root directory and the device name is replaced by table value.</p>

<h3>Processes and Images</h3>

<p>An <strong>image</strong> is a computer execution environment. It includes a memory image, general register value, status of open files and the like.</p>

<p>A <strong>process</strong> is execution of image.</p>

<p><code>fork</code>: to create a new process. The new processes after fork has copies of same image and share all open files.</p>

<h3>Implementation of Shell</h3>

<p>Shell most of the time waits for user to type command. At newline character shell&rsquo;s read calls returnds and shell analyzes the command line, putting the arg in form of <em>execute</em> and then the fork is called. The child process executes the command and parent process waits for the child process to finish. When child process finishes parent shell returns prompt back to the user.</p>

<p>Whenever &lsquo;&amp;&rsquo; is used, shell simply doesn&rsquo;t wait for the child process to finish before giving the prompt to user.</p>

<h3>Initializations</h3>

<p>The last in the initialization of unix is the creation of a single process and the invocation (via execute) of a program called <strong>init</strong>.</p>

<hr/>


<p>Paper further discusses about pipes, shell, filter, command seperators, implementation of shell using fork.</p>

<h2>Further Reading</h2>

<p><a href="../../../../2014/09/04/slash-udev-notes">More on /udev</a></p>

<p><img class="<a" src="href="http://i.imgur.com/aC3F5Bo.png">http://i.imgur.com/aC3F5Bo.png</a>&#8221;></p>

<h3>Class Notes:</h3>

<p>To make a system call: <code>int 0x80</code> -> was expensive.</p>

<p>OSX is essentially a POSIX-compatible.</p>

<p>Soft Link is a file (directory) whose contents are the file name pointing to actual file.</p>

<p>In memory data structure for open files.</p>

<p>File system is a DAG (Directed Acyclic Graph)</p>

<p>File doesn&rsquo;t have a self link, whereas directory does.</p>

<p>Circular structures cannot be garbage collected based on reference count.</p>

<p><img class="left <a" src="href="http://i.imgur.com/C9dGPuy.png">http://i.imgur.com/C9dGPuy.png</a>&#8221; width=&#8221;420&#8221;>
<img class="<a" src="href="http://i.imgur.com/wob4kNr.png">http://i.imgur.com/wob4kNr.png</a>&#8221; width=&#8221;420&#8221;></p>

<h3>mkfs</h3>

<p>From man page:</p>

<blockquote><p>mkfs is used to build a linux filesystem on a device, usually a hard disk partition. mkfs is usually a front-end for various filesystem builders (mkfs.fstype).</p></blockquote>

<p>The filesystem specific commands may be invoked directly. The convention is to name the commands as <code>mkfs.&lt;fs-type&gt;</code></p>
]]></content>
  </entry>
  
</feed>
