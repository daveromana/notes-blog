<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[learn]]></title>
  <link href="http://goyalankit.github.io/notes-blog/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/notes-blog/"/>
  <updated>2015-01-01T02:19:53+05:30</updated>
  <id>http://goyalankit.github.io/notes-blog/</id>
  <author>
    <name><![CDATA[Ankit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concurrent Objects]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/18/concurrent-objects/"/>
    <updated>2014-11-18T06:10:16+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/18/concurrent-objects</id>
    <content type="html"><![CDATA[<p>Method calls take time whereas method calls by a single thread are always sequential.</p>

<h3>Compositional</h3>

<p>A correctness property P is compositional if, whenever each object in system satisfies P, the system as a whole satisifies P. Basically we can compose objects satisfying a property P to create a more complex system that also satisfies P. For example, Quiescence.</p>

<hr />

<h3>Quiescent Consistency</h3>

<p>Principles:</p>

<ol>
<li>Method calls should appear in one-in-a-time sequential order. &ndash;| <strong>trivial</strong> |</li>
<li>Method calls separated by a period of quiescence should appear to take effect in real-time order.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># not quiescent
</span><span class='line'>
</span><span class='line'>Thread A --------------------|    r.write(7)    |----------------------------------------&gt;
</span><span class='line'>
</span><span class='line'>Thread B ---------------------- |  r.write(-3)    |-----------| r.read(-7) |-------------&gt;
</span><span class='line'>
</span><span class='line'>---------------------------------------------------- ******* -----------------------------
</span><span class='line'>
</span><span class='line'>****** period of quiescence</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Property one ensures that we read a valid value. However one can read the old value always.</li>
<li>So in the above example, we should either read 7 or 3 since there&rsquo;s a period of quiescence</li>
</ol>


<p>Informally,</p>

<ul>
<li>it says that any time an object becomes quiescent, then the execution so far is equivalent to some sequential execution of the completed calls.</li>
<li>all operations appear to occur in some sequential order</li>
<li>non-overlapping operations appear to occur in real-time order.</li>
<li>Program order may not be preserved. I enque x and then y; deque operation overlaps both enqueues, you can come up with y.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># program order not preserved. Since no period of quiescence. But this is Quiescent Consistent.
</span><span class='line'>
</span><span class='line'>Thread A --------------------|    r.enq(7)  |-------|  r.enq(-3)-----------------------&gt;
</span><span class='line'>
</span><span class='line'>Thread B ------------------------------|   r.deq(-3)    |------------------------------&gt;</span></code></pre></td></tr></table></div></figure>


<h4>Properties</h4>

<ul>
<li>non blocking</li>
<li>compositional</li>
<li>doesn&rsquo;t respect the program order</li>
<li>Quiescenly consistent with time</li>
<li>Cannot touch multiple objects.</li>
<li>equivalent to sequential order</li>
</ul>


<hr />

<h3>Sequential Consistency</h3>

<p>Principles:</p>

<ol>
<li>Method calls should appear to take effect in program order.</li>
<li><p>Method calls should appear in one-in-a-time sequential order. &ndash;| <strong>trivial</strong> |</p></li>
<li><p>consistent with program order</p></li>
<li>meet the object&rsquo;s sequential specification</li>
</ol>


<hr />

<h2>Linearizability and sequential consistency</h2>

<p>Linearizability: methods all at-a-time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Papi native hardware counters]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/13/papi-native-hardware-counters/"/>
    <updated>2014-11-13T03:41:50+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/13/papi-native-hardware-counters</id>
    <content type="html"><![CDATA[<h3>Check for the available native hardware counters:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ papi_native_avail</span></code></pre></td></tr></table></div></figure>


<h3>Sample code to get the values for native hardware counters</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;papi.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAX_COUNTERS 256</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rozmer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">events</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;PERF_COUNT_HW_CACHE_L1D:WRITE&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;PERF_COUNT_HW_CACHE_L1D:ACCESS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;PERF_COUNT_HW_CACHE_L1D:READ&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;PERF_COUNT_HW_CACHE_L1D:PREFETCH&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;PERF_COUNT_HW_CACHE_L1D:MISS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;HW_PRE_REQ:L1D_MISS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//&quot;L1-DCACHE-LOADS&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUMCOUNTERS 6</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">compute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">EventCode</span><span class="p">,</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">EventSet</span> <span class="o">=</span> <span class="n">PAPI_NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">PAPI_Counters</span><span class="p">[</span><span class="n">MAX_COUNTERS</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Initialize the library */</span>
</span><span class='line'>    <span class="n">retval</span> <span class="o">=</span> <span class="n">PAPI_library_init</span><span class="p">(</span><span class="n">PAPI_VER_CURRENT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span>  <span class="p">(</span><span class="n">retval</span> <span class="o">!=</span> <span class="n">PAPI_VER_CURRENT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;PAPI library init error!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* PAPI create event */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PAPI_create_eventset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">EventSet</span><span class="p">)</span> <span class="o">!=</span> <span class="n">PAPI_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;create event set: %s&quot;</span><span class="p">,</span> <span class="n">PAPI_strerror</span><span class="p">(</span><span class="n">retval</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Add events to Event Set */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMCOUNTERS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">retval</span> <span class="o">=</span> <span class="n">PAPI_add_named_event</span><span class="p">(</span><span class="n">EventSet</span><span class="p">,</span> <span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">!=</span> <span class="n">PAPI_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;add named event: %s&quot;</span><span class="p">,</span> <span class="n">PAPI_strerror</span><span class="p">(</span><span class="n">retval</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Start the counters */</span>
</span><span class='line'>    <span class="n">retval</span> <span class="o">=</span> <span class="n">PAPI_start</span><span class="p">(</span><span class="n">EventSet</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">matice1</span><span class="p">[</span><span class="n">rozmer</span><span class="p">][</span><span class="n">rozmer</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">matice2</span><span class="p">[</span><span class="n">rozmer</span><span class="p">][</span><span class="n">rozmer</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">matice3</span><span class="p">[</span><span class="n">rozmer</span><span class="p">][</span><span class="n">rozmer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Main multiply code</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">rozmer</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">rozmer</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">rozmer</span><span class="p">;</span> <span class="n">m</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">+</span> <span class="n">matice1</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">*</span> <span class="n">matice2</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">matice3</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Stop the counters */</span>
</span><span class='line'>    <span class="n">retval</span> <span class="o">=</span> <span class="n">PAPI_stop</span><span class="p">(</span><span class="n">EventSet</span><span class="p">,</span> <span class="n">PAPI_Counters</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">!=</span> <span class="n">PAPI_OK</span><span class="p">)</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Print the counters */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">NUMCOUNTERS</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%20lld %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">PAPI_Counters</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">events</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">compute</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Paxos]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/12/fast-paxos/"/>
    <updated>2014-11-12T02:40:06+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/12/fast-paxos</id>
    <content type="html"><![CDATA[<ul>
<li>Algorithm executes multiple rounds.</li>
<li>An acceptor votes to accept atmost one value in a single round.</li>
<li>Goal: Achieve consistency by ensuring that different values are not chosen in different rounds.</li>
<li>Note that rounds can run concurrently, may be skipped altogether.</li>
</ul>


<h2>Accepter</h2>

<p>State maintained by accepter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># state maintained by acceptor
</span><span class='line'>rnd[a]
</span><span class='line'>vrand[a]
</span><span class='line'>vval[a]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>rnd[a]</code> - highest numbered round in which a participated, initially 0.</li>
<li><code>vrand[a]</code> - highest numbered round in which a has cast a vote, initially 0.</li>
<li><code>vval[a]</code>- The value a voted to accept in round <code>vrand[a]</code>; it&rsquo;s initial value is irrelevant. can be inferred using <code>vrand[a] == 0</code></li>
</ul>


<p>Constraint: <code>vrand[a] &lt;= rnd[a]</code> is always true. Since it cannot vote without participating in it. But it can participate and doesn&rsquo;t vote.</p>

<p>Questions?
- what is this value that we are talking about?</p>

<h2>Coordinator (role is often played by acceptors)</h2>

<ul>
<li>For each round <em>i</em>, some coordiantor is pre-assigned to be the coordinator of round <em>i</em>.</li>
<li>Moreover, each coordinator is assigned to be the coordinator for infinitely many rounds.</li>
<li><strong>Proposers</strong> send their proposals to coordinators.</li>
<li>The coordinator picks a value in round <em>i</em>, that it tries to get chosen in that round.</li>
</ul>


<p>State maintined by coordinator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crnd[c]
</span><span class='line'>cval[c]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>crnd[c]</code> The highest-numbered round c has begun.</li>
<li><code>cval[c]</code> The value that c has picked for that round or the special value none if c has not yet picked a value for that round.</li>
</ul>


<p>Questions?
- How do we decide coordinator for a given round <em>i</em>?</p>

<h2>The Basic Algorithm</h2>

<h3>Phase 1a:</h3>

<ul>
<li>Coordinator sends a message ( <code>crnd</code>, <code>cval</code> ) to each acceptor to <code>participate</code> in round i.</li>
</ul>


<h3>Phase 1b:</h3>

<ul>
<li>Acceptor replies or ignores the message based on following conditions.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Success:
</span><span class='line'>i &gt; rnd[a]
</span><span class='line'>
</span><span class='line'>Fail:
</span><span class='line'>i &lt;= rnd[a] (i.e., a has already begun round i or higher)</span></code></pre></td></tr></table></div></figure>


<p> If success, it sends a message to coordinator containing (<code>vrand[a]</code>, <code>vval[a]</code>)</p>

<h3>Phase 2a:</h3>

<ul>
<li>Coordinator, on getting majority messages, sends acceptors a message to vote on <strong>value</strong>(cval, chosen by looking at the contents of Phase 1b message) in round <code>i</code>.</li>
</ul>


<h3>Phase 2b:</h3>

<ul>
<li>Acceptor accepts the message to vote on v in round i based on following conditions.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Success:
</span><span class='line'>i &gt;= rnd[a] and vrnd[a] != i
</span><span class='line'>
</span><span class='line'>Fail:
</span><span class='line'>i &lt; rnd[a] (accepted has started higher round)
</span><span class='line'>vrand[a] == i (alreaded voted in this round and only one value can be accepted in this round)</span></code></pre></td></tr></table></div></figure>


<p>Note: acceptor ignores the message no fail. On Accept, it sends a message to all <strong>learners</strong> announcing its round i vote.</p>

<h3>Learner</h3>

<ul>
<li>A learner accepts a value only if it receives message (Phase 2b) from majority of acceptors.</li>
</ul>


<h2>Important Constraint</h2>

<ul>
<li>Coordinators are assigned unique rounds, which ensures that phase 2a messages cannot be sent for with different values in same round.</li>
</ul>


<p><img src="http://i.imgur.com/f6kKDsL.jpg?1" alt="Paxos Basic" /></p>

<h3>Picking a value in phase 2a</h3>

<blockquote><p>CP: For any round i and j with j &lt; i, if a value v has been chosen or might yet be chosen in round j, then no acceptor can vote for any value except v in round i.</p></blockquote>

<hr />

<ul>
<li>paper doesn&rsquo;t discuss leader election (coordinator)</li>
</ul>


<h2>Making Progress</h2>

<ul>
<li>When acceptor receives</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/07/ruby-notes/"/>
    <updated>2014-11-07T09:20:50+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/07/ruby-notes</id>
    <content type="html"><![CDATA[<h2>Lambdas vs Procs</h2>

<blockquote><p>Both are proc objects</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="nb">proc</span>   <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">l</span> <span class="c1"># =&gt; #&lt;Proc:0x007ff16389da58@-:1 (lambda)&gt;</span>
</span><span class='line'><span class="nb">p</span> <span class="c1"># =&gt; #&lt;Proc:0x007ff16389da30@-:2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Return behaves differently</p></blockquote>

<p><strong>lambda returns from the context of lambda only.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_it</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">l</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;World!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Bye World&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">do_it</span>
</span><span class='line'><span class="c1"># &gt;&gt; Hello World!</span>
</span><span class='line'><span class="c1"># &gt;&gt; Bye World</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><strong>Proc returns from the calling context too.</strong>
- Note that the bye world is not printed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_it</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="nb">proc</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">l</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;World!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Bye World&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">do_it</span>
</span><span class='line'><span class="c1"># &gt;&gt; Hello World!</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spanner: Google's Globally Distributed Database]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/07/spanner-googles-globally-distributed-database/"/>
    <updated>2014-11-07T06:17:50+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/07/spanner-googles-globally-distributed-database</id>
    <content type="html"><![CDATA[<p><strong>Spanner</strong>: Database that shards data across many set of Paxos state machines in data centers spread accross the world.</p>

<h3>Time API</h3>

<p>Sawtooth peak when executing, comes back when synced from server.</p>

<p>Smax: largest timestamp till relpica is up to date.</p>

<h3>Leases</h3>

<p>leaders participate in local and distributed transactions. So it&rsquo;s better to have leaders for long time. Auto released after expiration.</p>

<p>extend the lease:
- leader can ssign timestamp to lease in future.
- leader can try to extend it&rsquo;s lease to make sure it&rsquo;s present when transaction happens.</p>

<h3>Snapshot isolation: all reads satisfied from the image.</h3>

<ul>
<li>not as strong as strict serializability.</li>
<li>supported using Tsafe -> time when you don&rsquo;t have prepare transactions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[map reduce]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/11/07/map-reduce/"/>
    <updated>2014-11-07T00:01:15+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/11/07/map-reduce</id>
    <content type="html"><![CDATA[<p><strong>map</strong>: processes a key/value pair to generate a set of intermediate key/value pairs.</p>

<p><strong>reduce</strong>: merges all intermediate values associated with same intermediate keys.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map    (k1, v1)       -&gt; list(k2, v2)
</span><span class='line'>reduce (k2, list(v2)) -&gt; list(v2)</span></code></pre></td></tr></table></div></figure>


<p>All the mappers have to finish before reduces can end.</p>

<!--more-->


<p><img src="http://i.imgur.com/At7gcgY.png?1"></p>

<ul>
<li>Mappers based on input sets</li>
<li>Reduces based on number of output files</li>
<li>Potentially less robust, you lose type information from map to reduce. Possibility of garbage values.</li>
<li>Mappers read from GFS but write to local file system. Since it&rsquo;s faster to write locally.</li>
<li>Reducers again write to GFS.</li>
</ul>


<h3>Criticism</h3>

<ul>
<li>Step backwards in programming paradigm.

<ul>
<li>schemas are good.</li>
</ul>
</li>
<li>Consistency model. Garbage values can creep in.</li>
<li>No query language.</li>
<li>More on the database side of the map-reduce.</li>
<li>No indexes are used.</li>
<li>Skew is the real problem.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paxos Notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/30/paxos-notes/"/>
    <updated>2014-10-30T03:27:37+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/30/paxos-notes</id>
    <content type="html"><![CDATA[<p>Source: Paxos Made Practical - David Mazieres</p>

<p><strong>Paxos</strong> is a simple protocol tat a group of machines in a distributed system can use to agree on a value proposed by a member of the group.</p>

<p>If it terminates, the protocol reaches consensus even if the network was inreliable  and mutiple machines simultaneously tried to propose different values.</p>

<p>The Basic idea is that each proposal has a unique number.</p>

<!-- more -->


<h3>State Machine Replication</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/27/make-notes/"/>
    <updated>2014-10-27T23:14:03+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/27/make-notes</id>
    <content type="html"><![CDATA[<p>Makefile basic structure</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target: source
</span><span class='line'>  command</span></code></pre></td></tr></table></div></figure>


<p>PHONY prevents <code>rm</code> to be executed each time, <code>make clean</code> is called. Consider a case when there are no <code>.o</code> files, <code>make clean</code> will still execute <code>rm</code> otherwise.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.PHONY
</span><span class='line'>clean:
</span><span class='line'>  rm *.o</span></code></pre></td></tr></table></div></figure>


<p>Get the dependencies source for a given file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -M test.cpp
</span><span class='line'>
</span><span class='line'># better
</span><span class='line'>g++ -MM main.cpp -std=gnu++11
</span></code></pre></td></tr></table></div></figure>


<p>Continue making in case of errors</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make -i</span></code></pre></td></tr></table></div></figure>


<p>Multithreaded make</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make -j N</span></code></pre></td></tr></table></div></figure>


<p>diction - spell checker</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[concurrency]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/23/concurrency/"/>
    <updated>2014-10-23T23:08:21+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/23/concurrency</id>
    <content type="html"><![CDATA[<ul>
<li>Determinism doesn&rsquo;t effectively solves the problem.</li>
<li>Symbolic execution</li>
</ul>


<h2>Transactions and Concurrency</h2>

<h1>ACID</h1>

<p><strong>Atomicity:</strong> All or nothing. Log to clean if system fails. Output commit -> you are screwed.
<strong>Consistency:</strong> Internal consistency of the database.
<strong>Isolation:</strong> Executes if it were running along.
<strong>Durability:</strong> Results will not be lost.</p>

<p>Memory Transactions: no guarantee, what if power goes down.</p>

<hr />

<p>Isolation: some serial execution this is equivalent to.
Serializability: One approach to isolation - not dominant. Linearizability is dominant.</p>

<p>Transactions: 2-phase commit, 2-phase locking.</p>

<p>Serializability allows you to opearte on multiple objects.</p>

<p>Serializability and Sequential consistency might not correspond to real time order.
database - serializability. memory system: read/write.</p>

<p>composable: consisten with real time and doesn&rsquo;t touch multiple objects.</p>

<p>Single write gets broken into multiple writes inside kernel. Single write is not serializable</p>

<p><a href="http://www.cs.rochester.edu/courses/254/fall2013/notes/12-concurrency">http://www.cs.rochester.edu/courses/254/fall2013/notes/12-concurrency</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[static and dynamic linking]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/18/static-and-dynamic-linking/"/>
    <updated>2014-10-18T05:55:26+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/18/static-and-dynamic-linking</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// add.h</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sub.h</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sub</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// add.c</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sub.c</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sub</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// demo.c</span>
</span><span class='line'><span class="cp">#include &lt;stdio&gt;</span>
</span><span class='line'><span class="cp">#include &quot;add.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;sub.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Sum of %d and %d is %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Difference of %d and %d is %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">sub</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Static Libraries</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gcc -c add.c
</span><span class='line'><span class="nv">$ </span>gcc -c sub.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ar rs libheymath.a add.o sub.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gcc -c demo.c
</span><span class='line'><span class="nv">$ </span>gcc -o demo.out -L . demo.o -lheymath
</span></code></pre></td></tr></table></div></figure>


<h3>.symtab</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Num:    Value          Size Type    Bind   Vis      Ndx Name
</span><span class='line'>55: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__
</span><span class='line'>56: <span class="m">0000000000601038</span>     <span class="m">0</span> OBJECT  GLOBAL HIDDEN    <span class="m">24</span> __dso_handle
</span><span class='line'>57: 000000000040058c    <span class="m">20</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> sum
</span><span class='line'>58: <span class="m">0000000000400640</span>     <span class="m">4</span> OBJECT  GLOBAL DEFAULT   <span class="m">15</span> _IO_stdin_used
</span><span class='line'>59: 00000000004005c0   <span class="m">101</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> __libc_csu_init
</span><span class='line'>60: <span class="m">0000000000601048</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT   <span class="m">25</span> _end
</span><span class='line'>61: <span class="m">0000000000400440</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> _start
</span><span class='line'>62: <span class="m">0000000000601040</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT   <span class="m">25</span> __bss_start
</span><span class='line'>63: 000000000040052d    <span class="m">95</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> main
</span><span class='line'>64: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses
</span><span class='line'>65: <span class="m">0000000000601040</span>     <span class="m">0</span> OBJECT  GLOBAL HIDDEN    <span class="m">24</span> __TMC_END__
</span><span class='line'>66: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable
</span><span class='line'>67: 00000000004005a0    <span class="m">22</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> sub
</span><span class='line'>68: 00000000004003e0     <span class="m">0</span> FUNC    GLOBAL DEFAULT   <span class="m">11</span> _init
</span></code></pre></td></tr></table></div></figure>


<h2>Dynamic Libraries</h2>

<p>Dynamic libraries need to be created explicitly. They take less space since they can be shared and used functions are not put in executable.</p>

<p>Note that dynamic libraries introduce dependencies and the executable cannot be run directly on another system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gcc -Wall -fPIC -c add.c
</span><span class='line'><span class="nv">$ </span>gcc -Wall -fPIC -c sub.c
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gcc -shared -o libheymath.so add.o sub.o
</span><span class='line'><span class="nv">$ </span>sudo cp libheymath.so /usr/lib/
</span><span class='line'><span class="nv">$ </span>ldconfig /usr/lib/libheymath.so
</span><span class='line'><span class="nv">$ </span>gcc -o demo.out demo.o -lheymath
</span></code></pre></td></tr></table></div></figure>


<p>Dependencies can be checked using <code>ldd</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ldd demo.out
</span><span class='line'>
</span><span class='line'>  linux-vdso.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x00007fffe5bfe000<span class="o">)</span>
</span><span class='line'>  libheymath.so <span class="o">=</span>&gt; /usr/lib/libheymath.so <span class="o">(</span>0x00007fdc19d77000<span class="o">)</span>
</span><span class='line'>  libc.so.6 <span class="o">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class="o">(</span>0x00007fdc199b1000<span class="o">)</span>
</span><span class='line'>  /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x00007fdc19f95000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>.symtab</h2>

<p>Notice that the sub and add are have undefined index and will be resolved at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Num:    Value          Size Type    Bind   Vis      Ndx Name
</span><span class='line'>53: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__
</span><span class='line'>54: <span class="m">0000000000601048</span>     <span class="m">0</span> OBJECT  GLOBAL HIDDEN    <span class="m">24</span> __dso_handle
</span><span class='line'>55: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND sum
</span><span class='line'>56: <span class="m">0000000000400800</span>     <span class="m">4</span> OBJECT  GLOBAL DEFAULT   <span class="m">15</span> _IO_stdin_used
</span><span class='line'>57: <span class="m">0000000000400780</span>   <span class="m">101</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> __libc_csu_init
</span><span class='line'>58: <span class="m">0000000000601058</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT   <span class="m">25</span> _end
</span><span class='line'>59: <span class="m">0000000000400630</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> _start
</span><span class='line'>60: <span class="m">0000000000601050</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT   <span class="m">25</span> __bss_start
</span><span class='line'>61: 000000000040071d    <span class="m">95</span> FUNC    GLOBAL DEFAULT   <span class="m">13</span> main
</span><span class='line'>62: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses
</span><span class='line'>63: <span class="m">0000000000601050</span>     <span class="m">0</span> OBJECT  GLOBAL HIDDEN    <span class="m">24</span> __TMC_END__
</span><span class='line'>64: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable
</span><span class='line'>65: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND sub
</span><span class='line'>66: 00000000004005b0     <span class="m">0</span> FUNC    GLOBAL DEFAULT   <span class="m">11</span> _init
</span></code></pre></td></tr></table></div></figure>


<h2>References:</h2>

<ol>
<li><a href="http://cs-fundamentals.com/c-programming/static-and-dynamic-linking-in-c.php">http://cs-fundamentals.com/c-programming/static-and-dynamic-linking-in-c.php</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[process address space]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space/"/>
    <updated>2014-10-16T05:10:53+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/16/process-address-space</id>
    <content type="html"><![CDATA[<ul>
<li>On IA-32 systems with 2<sup>32</sup> = 4GiB, the address space is usually split in 3:1 ratio. The kernel is assied 1GiB, while 3GiB is available to each userspace process.</li>
<li>The contents of kernel address space are always same regardless of which user process is active.</li>
</ul>


<h2>Layout of the Process Address Space</h2>

<ol>
<li><strong>text segment</strong>: binary code of the code currently running.</li>
<li>code for dynamic libraries.</li>
<li>heap where global variables and dynamically generated data are stored.</li>
<li>stack used to store local variables and to implement function calls.</li>
<li>Sections with environment variables and command-line arguments.</li>
<li>Memory mappings that map the contents of files into the virtual address space.</li>
</ol>


<p>Each process has <code>mm_struct</code> instance that can be accessed by task structure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[program loading and memory mapping]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/15/program-loading-and-memory-mapping/"/>
    <updated>2014-10-15T02:10:27+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/15/program-loading-and-memory-mapping</id>
    <content type="html"><![CDATA[<h2><code>arch_prctl(ARCH_SET_FS, addr)</code></h2>

<p>From man page:</p>

<blockquote><p>set architecture specific thread state</p></blockquote>

<ul>
<li><p><code>ARCH_SET_FS</code>: set the 64-bit base address for the <code>FS</code> register to <code>addr</code></p>

<p>  Earlier kernel used to store an array indexed by threadid containing address of thread space, however now it sets the FS register for threads local storate.
  <code>GS</code> is used for kernel threads storage pointer whereas <code>FS</code> is used for userspace threads.</p></li>
</ul>


<!--more-->


<h2>ELF Format:</h2>

<h2>Creating the memory image of a new process</h2>

<p>sys_execve is responsible for setting up the environment for running the program. Below are the steps taken by sys_execve which calls do_execve_common:</p>

<ol>
<li>Check that <code>NPROC</code> limit is not exceeded (i.e.,total number of process), if it is then exit.(<code>L:1443</code>)</li>
<li>Allocate memory for data structure in kernel.(<code>L:1458</code>)</li>
<li>Open the exec file using <code>do_open_exec</code>(<code>L:1469</code>)</li>
<li>Now the kernel data structures are initialized and <code>exec_binprm</code> is called.</li>
<li><p><code>exec_binprm</code> calls <code>search_binary_handler</code> which finds the binary format handler, in our case elf. So it finds load_elf_binary. (fs/binfmt_elf.c L:84 and 571)</p>

<ul>
<li><code>load_elf_binary</code> does consistency checks by making sure that it’s an ELF format file by comparing the main number and ELF in <code>e_ident</code> field in header.</li>
<li><code>load_elf_binary</code> reads the header information and looks for <code>PT_INTERP</code> segment to see if an inter- preter was specified. This segment is only present for dynamically linked programs and not for statically linked.</li>
<li>Now all the loadable segments are mmapped into memory, by reading the ELF Program headers. <code>bss</code> segment is also mapped.</li>
<li><code>create_elf_tables</code> creates a stack at a random offset and sets the auxiliary vectors, arguments and environments according to the standard.</li>
<li>Finallythecontrolistransferredtoe_entrypointusingstart_threadmethod.(<code>fs/binfmt_elf.cL:990</code>)</li>
</ul>
</li>
</ol>


<p><img src="http://goyalankit.github.io/notes-blog/images/post-images/elf.png"/>
source: Professional Linux Kernel Architecture</p>

<p><img src="http://goyalankit.github.io/notes-blog/images/post-images/elf2.png"/>
source: stackoverflow.com</p>

<h2>Change the .text entry address in ELF</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc test1.c -o test1.out -Wl,-Ttext-segment=0x2000000 -static</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/8116648/why-is-the-elf-entry-point-0x8048000-not-changeable?lq=1">http://stackoverflow.com/questions/8116648/why-is-the-elf-entry-point-0x8048000-not-changeable?lq=1</a></p>

<h1>entry point vs Load Address</h1>

<p>First LOAD specifies the program code in the file.
start(glibc) is the entry point and not the address in LOAD.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>start -&gt; init -&gt; main</span></code></pre></td></tr></table></div></figure>


<h2>Stack Growth</h2>

<p><img src="http://i.imgur.com/ynPxqhZ.png?2"/></p>

<h2>Links for ELF</h2>

<ol>
<li><a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">http://www.skyfree.org/linux/references/ELF_Format.pdf</a></li>
<li><a href="http://articles.manugarg.com/aboutelfauxiliaryvectors.html">http://articles.manugarg.com/aboutelfauxiliaryvectors.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java notes]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/13/java-notes/"/>
    <updated>2014-10-13T23:37:23+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/13/java-notes</id>
    <content type="html"><![CDATA[<ul>
<li>Good time library: JodaTime</li>
<li>Logging: Log4j</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Device Drivers]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/10/device-drivers/"/>
    <updated>2014-10-10T03:04:14+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/10/device-drivers</id>
    <content type="html"><![CDATA[<p>Device driver used to interact with device. Major number is used to identify device driver.</p>

<ul>
<li>Character Device: writes and reads character by character. Operates in blocking way (synchronous, user must wait for completion). More common.</li>
<li>Block Device: write/read block by block (larfer).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google File System]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/09/google-file-system/"/>
    <updated>2014-10-09T23:07:40+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/09/google-file-system</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/gfs-sosp2003.pdf">http://static.googleusercontent.com/media/research.google.com/en/us/archive/gfs-sosp2003.pdf</a> <br/>
Published: 2003</p>

<hr />

<h2>Design Constraints</h2>

<ol>
<li>Component failures are the norm rather than exception. FS consists of thousands if commodity parts and is accessed by comparable number of clients.</li>
<li>Files are huge by traditional standards. Multi-GB files are common. Billions of approximately KB-sized files.</li>
<li>Most files are mutated by appending new data rather than overwriting existing data.</li>
<li>Co-designing the applications and the file system API benifits the overall system by increasing flexibility.</li>
</ol>


<h2>Architecture</h2>

<p>GFS consists of a <strong>single master</strong> and multiple <strong>chunkservers</strong> and is accessed by multiple clients.</p>

<h2>Class Notes:</h2>

<p>Problem in datacenters: failures.</p>

<p><strong>Master</strong>: Single point of failure, master has log of operations.</p>

<p>Lease: soft state.</p>

<p>Revoke:</p>

<ol>
<li>wait</li>
<li>contact server</li>
</ol>


<hr />

<p>Snapshot:</p>

<ol>
<li>revoke lease</li>
<li>copy-on-write</li>
</ol>


<p>snapshot on large files:-> copy on writes.</p>

<p>Contact replicas and tell them to make local copies. Update the metadata to point to the individual chunks.</p>

<ul>
<li>distributed the consistency to both application libraries.</li>
<li>unique identifier could be a problem.</li>
</ul>


<p>chunks metadata at master are not persisted.</p>

<p>Appends are ordered:</p>

<p>1) lease and primary
2) primary serial #&rsquo;s</p>

<p>Master doesn&rsquo;t know about the namespaces either, it is also stored on chunkservers.</p>

<ul>
<li>No hardlinks/softlinks</li>
<li>absolute paths</li>
<li>no datastructure representing directories like inodes</li>
<li>no datastructure to enumerate contents of one directory</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Resource Management in VMWare ESX Server]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/10/03/memory-resource-management-in-vmware-esx-server/"/>
    <updated>2014-10-03T09:05:46+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/10/03/memory-resource-management-in-vmware-esx-server</id>
    <content type="html"><![CDATA[<p>Source: <a href="https://www.usenix.org/legacy/event/osdi02/tech/waldspurger/waldspurger.pdf">https://www.usenix.org/legacy/event/osdi02/tech/waldspurger/waldspurger.pdf</a><br/>
Published: 2002</p>

<p>VMWare ESX Server is a thin layer designed to multiplex hardware resources efficiently among virtual machines running unmodified commodity operating systems.</p>

<h3>Memory Virtualization</h3>

<p>All guest operating systems expect a zero-phased physical address space as provided by real hardwares. ESX Server gives this illusion by adding an extra level of translation. In this mechanism, Virtual addresses are mapped to &ldquo;Physical Address&rdquo; (provided by ESX Server) which are further mapped to Machine addresses (actual memory on chip). Seperate shadow pages tables, which contains virtual to machine page mappings for use by the processor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> -----------------      PMAP in ESX    ------------------     Page Table in OS   -----------------
</span><span class='line'>| Machine Address |   &lt;-------------  | Physical Address |  &lt;-----------------  | Virtual Address |
</span><span class='line'> -----------------                     ------------------                        -----------------</span></code></pre></td></tr></table></div></figure>


<h4>Reclamation Mechanisms</h4>

<p>ESX Server usually overcommits memory and needs a reclamation mechanism to reclaim memory from one or more virtual machines.</p>

<h4>Balooning</h4>

<p>A small balloon module is loaded into the guest OS as a pseudo-device driver or kernel service. It doesn&rsquo;t have any external interface. When ESX server wants to reclaim memory, it instructs the driver to &lsquo;inflate&rsquo; by allocating pinned physical pages within the VM. This creates a memory pressure inside the VM and guest OS starts reclaiming memory to satisfy drivers request. The balloon driver communicates the physical page number to ESX server, which may then recalim the corressponding machine page.</p>

<ul>
<li>Technically guest os shouldn&rsquo;t touch pages allocated to balloon driver, however ESX server doesn&rsquo;t rely on guest os correctness. It annotates its pmap entry and deallocates its associated MPN (machine page number). any subsequent attempt to access that memory will generate a page fault that is handled by the server.</li>
</ul>


<h4>Demand Paging</h4>

<p>ESX server preferentially uses ballooning to reclaim memory, treating as a common-case optimization if ballooning is not possible or insufficient, memory is reclaimed by paging out to an ESX Server swap area on disk, without any guest involvement.</p>

<p>A randomized page replacement policy is used so that higher level page semantics are not effected.</p>

<h4>Sharing Memory - Content-Based page sharing</h4>

<p>ESX server maintains a hashmap of pages where key is hash summarizing the content in page. If the hash value for new page matches an existing page, then the whole contents of the page are compared and if they match a reference count is incremented and the page is shared. Any attempt to write to a shared page will generate a fault, transparently creating a new page. (COW - copy on write)</p>

<p>If no match is found the page is hashed but it is not marked as COW. Instead it is tagged as a special hint entry. On any future match, contents of the hint page are rehashed and checked to see if the page has been modified. If the hash is still valid, a full comparison is performed and page is shared (marked as COW now).</p>

<h4>Share based allocation</h4>

<p>Resource rights are encapsulated by shares, which are owned by clients that consume resources. Traditionally VMs that have more shares are allocated more resources nad in case of reclamation, the VMs with lower shares are used to reclaim memory. It may happen that VMs with larger share are not using the memory and smaller VMs are the one that can actually benifit from the memory. So we don&rsquo;t have good resource utilization here.</p>

<p>ESX server introduces the concept of idle memory tax which charges more for the idle pages than the pages that are activally used.</p>

<h4>Measuring Idle memory</h4>

<p>ESX server uses a statistical sampling approach to obtain aggregate VM working set estimates directly, without any guest involvement. At the start of sampling period, a small number of the vm&rsquo;s &ldquo;physical&rdquo; pages are selected and their corresponding TLB enteries and MMUU state is invalidated. When VM access those pages, it leads to a fault and a use of the page is registered. At the end of period fraction f of memory actively accessed by the vm can be calculated by simply f = t/n (t page faults out of n invalidations)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[writing my own networked file system]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/27/writing-my-own-networked-file-system/"/>
    <updated>2014-09-27T02:18:45+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/27/writing-my-own-networked-file-system</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/goyalankit/os/blob/master/lab2/netfs.c">https://github.com/goyalankit/os/blob/master/lab2/netfs.c</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log structured file system]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/26/log-structured-file-system/"/>
    <updated>2014-09-26T01:07:15+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/26/log-structured-file-system</id>
    <content type="html"><![CDATA[<p>In LFS, log is the only structure on disk. The log is divided into segments (to maintain space for large files) where data is written sequentially. <strong>segment cleaner</strong> compresses the information from heavily fragmented code.</p>

<ul>
<li>Log also stores indexing information so that the files can be read back with efficiency comparable to current file systems.</li>
</ul>


<p>LFS is based on assumption that files are cached in main memory, so the majority of traffic write traffic which is efficient since we are writing sequentially and eliminating seeks in the disk.</p>

<ul>
<li>Sprite LFS uses 60-75% of the disk bandwith where as unix file system uses about 5-10% since most of the time is spent in seeking.</li>
</ul>


<hr />

<p>The main challenge of LFS is to ensure that there are always large extents of free space available for writing new data. Large extents called <em>segments</em> are used, where segment cleaner continually regenerates empty segments by compressing the live data from heavily fragmented segements.</p>

<blockquote><p>File system is governed by two basic building blocks: technology and workload.</p></blockquote>

<p>Three components that are significant for file system design:</p>

<ol>
<li><strong>Processors</strong>- getting faster and fater, putting more pressure on memory</li>
<li><strong>Main Memory</strong> - Can cache files and change the predominant type of data, like more writes than reads, so you can optimize you FS for writes</li>
<li><strong>Disks</strong> - well that&rsquo;s where you store your data, they have two components:

<ul>
<li>Transfer Bandwith -  can be improved using disk arrays and parallel-head disks.</li>
<li>Access Time - depends on mechanical head (at the time of publishing).</li>
</ul>
</li>
</ol>


<hr />

<ul>
<li>Unix file system writes metadata structures such as directories and inodes synchronously, which is not good for lot of small files.</li>
<li>LFS buffers a sequence of file system changes in the file cache and writes them sequentailly in a single disk operation.</li>
</ul>


<h2>Key Issues</h2>

<ol>
<li>Information Retrieval  - uses inodes and maintains a inode map which contains the location of inodes.</li>
<li>Large free space</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xen - the art of virtualization]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/23/xen-the-art-of-virtualization/"/>
    <updated>2014-09-23T23:33:46+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/23/xen-the-art-of-virtualization</id>
    <content type="html"><![CDATA[<h2>x86 virtualization challenges</h2>

<ul>
<li>EFLAGS register has interrupt enable flag(IF). If the kernel is being virtualized it doesn&rsquo;t have privilage to enable interrupts. Kernel calls pushf and popf all over the place.</li>
<li>Register cr3 points to the base of page table. Hardware MMU will read cr3 on page faults if the virtual addressing is enabled. VMM can&rsquo;t trust OS, solved by either shadow page tables (ESX Server) or allowing updates after verification (XEN)</li>
<li>Untagged TLB means frequent flushes. Addressed with hardware translation.</li>
</ul>


<h3>Consider page fault</h3>

<p>ESX Server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="no">Guest</span> <span class="ss">application</span><span class="p">:</span> <span class="n">refers</span> <span class="n">to</span> <span class="n">unmapped</span> <span class="n">memory</span> <span class="n">address</span><span class="o">.</span>
</span><span class='line'><span class="ss">Hardware</span><span class="p">:</span> <span class="no">TRAP</span><span class="o">!</span> <span class="n">set</span> <span class="n">privilaged</span> <span class="n">bit</span><span class="o">.</span> <span class="n">jump</span> <span class="n">to</span> <span class="no">VMM</span> <span class="nb">trap</span> <span class="n">handler</span>
</span><span class='line'><span class="ss">VMM</span><span class="p">:</span> <span class="no">Figure</span> <span class="n">out</span> <span class="n">which</span> <span class="n">guest</span> <span class="no">OS</span><span class="p">,</span> <span class="n">clear</span> <span class="n">privilaged</span> <span class="n">bit</span><span class="p">,</span> <span class="n">check</span> <span class="n">shadow</span> <span class="n">page</span> <span class="n">table</span> <span class="p">(</span><span class="ow">or</span> <span class="n">software</span> <span class="no">TLB</span> <span class="n">cache</span><span class="p">),</span> <span class="k">if</span> <span class="n">page</span> <span class="ow">not</span> <span class="n">resident</span><span class="p">,</span> <span class="n">set</span> <span class="n">up</span> <span class="nb">trap</span> <span class="n">registers</span> <span class="k">for</span> <span class="n">guest</span> <span class="no">OS</span><span class="p">;</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">that</span> <span class="n">guest</span> <span class="no">OS</span><span class="s1">&#39;s trap handler.</span>
</span><span class='line'><span class="s1">Guest OS: Read cr2 to find the faulting address</span>
</span><span class='line'><span class="s1">HW: TRAP! You can;t read the cr2; set privileged bit; jump to VMM trap handler.</span>
</span><span class='line'><span class="s1">VMM: Read the cr2 and put faulting address it into guest OS register; clear privileged bit.</span>
</span><span class='line'><span class="s1">Guest OS: Allocate physical page and write page table entry from VA -&gt; PA</span>
</span><span class='line'><span class="s1">HW: TRAP! you can&#39;</span><span class="n">t</span> <span class="n">write</span><span class="p">(</span><span class="no">READ</span><span class="o">-</span><span class="no">ONLY</span> <span class="n">access</span><span class="p">)</span> <span class="n">to</span> <span class="n">page</span> <span class="n">table</span><span class="o">.</span> <span class="n">set</span> <span class="n">privilaged</span> <span class="n">bit</span><span class="p">;</span> <span class="n">jump</span> <span class="n">to</span> <span class="no">VMM</span> <span class="n">handler</span>
</span><span class='line'><span class="ss">VMM</span><span class="p">:</span> <span class="no">Allocate</span> <span class="n">a</span> <span class="n">page</span> <span class="n">of</span> <span class="n">machine</span> <span class="n">memory</span><span class="p">,</span><span class="n">record</span> <span class="no">PA</span><span class="o">-&gt;</span><span class="no">MA</span> <span class="n">mapping</span> <span class="ow">and</span> <span class="n">install</span> <span class="n">it</span> <span class="k">in</span> <span class="n">shadow</span> <span class="n">page</span> <span class="n">table</span><span class="p">;</span> <span class="n">clear</span> <span class="n">privileged</span> <span class="n">bit</span><span class="p">;</span> <span class="k">return</span> <span class="n">to</span> <span class="n">guest</span> <span class="no">OS</span> <span class="nb">trap</span> <span class="n">handler</span><span class="o">.</span>
</span><span class='line'><span class="no">Guest</span> <span class="ss">OS</span><span class="p">:</span> <span class="n">everything</span> <span class="n">worked</span> <span class="n">fine</span><span class="o">.</span> <span class="sb">`iret`</span> <span class="no">Clear</span> <span class="n">the</span> <span class="n">privileged</span> <span class="n">bit</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">to</span> <span class="n">guest</span> <span class="n">handler</span>
</span><span class='line'><span class="ss">HW</span><span class="p">:</span> <span class="no">TRAP</span><span class="o">!</span> <span class="p">(</span><span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">get</span> <span class="n">to</span> <span class="n">clear</span> <span class="n">the</span> <span class="n">priveleged</span> <span class="n">bit</span><span class="p">);</span> <span class="n">set</span> <span class="n">privileged</span><span class="p">;</span> <span class="n">jump</span> <span class="n">to</span> <span class="no">VMM</span> <span class="n">handler</span>
</span><span class='line'><span class="ss">VMM</span><span class="p">:</span> <span class="sb">`iret`</span> <span class="n">to</span> <span class="n">guest</span> <span class="n">application</span>
</span></code></pre></td></tr></table></div></figure>


<h3>XEN</h3>

<p><strong>For each privilage level, a separate stack is maintained.</strong></p>

<p>Guest OS runs in Ring 1, Application runs in Ring 4 and VMM runs in Ring 0.</p>

<p>When application is executing it has its own stack in Ring 4, now when we have a page fault, hardware traps and calls the trap handler. Trap handler is directly registered by Guest OS (though validated by XEN). Trap handeling code runs in Ring 1 (guest OS)</p>

<h4>Memory:</h4>

<ul>
<li>Guest OSes allocates and manage hardware page tables.</li>
<li>Guest OS allocates and registers with xen giving away its write privileges.</li>
<li>All updates (using hyper calls) need to be validated by XEN.</li>
<li>XEN registers page tables directly with MMU.</li>
<li>To aid validation frames are marked: page directory, page table, local descriptor table, global des. tab., Writable.</li>
</ul>


<h4>CPU:</h4>

<ul>
<li>basic assumption: os is most privileged., rings help.</li>
<li><p>Privileged instructions are paravirtualized by requiring them to be validated and executed within xen. Any guest os attempt to execute privileged instruction: failed by processor (silently or trap).</p></li>
<li><p>Exceptions and trap are virtualized straightforwardly. A table describing the handler for each type is registered with XEN for validation. exception stack frames are unmodified in paravirt.</p></li>
<li>Excepions can be directly handled by hardware, but page faults need to go through XEN.</li>
<li>Page fault handler would read cr2(not possible), copy it to the extended stack frame.</li>
<li>On page fault, xen copies stack frame to guest os and return control to registered handler.Trap handlers (guest OS) are in Ring 1. CR2 is in ring 0. M2P</li>
</ul>


<h4>Device I/O</h4>

<ul>
<li>clean and simple abstractions.</li>
<li>interrupts -> lightweight event delivery mechanism.</li>
</ul>


<h4>Control and Management:</h4>

<ul>
<li>Hypervisor will be involved in scheduling but there is no need to be involved in high level details such as how to share the CPU among domains. or what kind of packets a domain can transfer.</li>
<li>Hypervisor provides control operations through an interace accessible from authorized domains.</li>
<li>Domain 0 is created at boot time and has access to control interface and is responsible for application level management software.</li>
<li>Control interface provides the ability to create/destrot domains, their scheduling parameters, physical memory allocations and access they are given to physical resources like physical disk and network devices.
*</li>
</ul>


<h3>Class Notes:</h3>

<p>Domain 0 - is a VM. Device drivers are put inside domain 0.</p>

<p>write a block of data ==> goes to VMM ==> goes to VM (converting it to actual blocks).</p>

<hr />

<p>Not XEN RELATED
Hardware virtualization
system calls and page faults don&rsquo;t trap.</p>

<p>VA - PT - PA</p>

<p>VMWare
VA - Shadow PT - MA
PA - PMAP - MA</p>

<p>Shadow tables - per guest application. Since it maps from VA.
PMAP is per guest OS</p>

<p>Extended page table - per VM or per guest.</p>

<p>A VM has well defined PA space</p>

<p>Two ways of VMM</p>

<p>Build it into operating system.
OS like explicitly running.</p>

<p>ESX server(special purpose VMM) vs ESX workstation (general purpose os)</p>

<p>Double Paging - two different pieces of software working on it.</p>

<p>Force guest OS to use it&rsquo;s own paging algorithm</p>

<h4>information on exceptions and interrupt handlers</h4>

<p><a href="http://cse.unl.edu/~goddard/Courses/CSCE351/IntelArchitecture/IntelInterupts.pdf">http://cse.unl.edu/~goddard/Courses/CSCE351/IntelArchitecture/IntelInterupts.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scheduling basics]]></title>
    <link href="http://goyalankit.github.io/notes-blog/blog/2014/09/21/scheduling-basics/"/>
    <updated>2014-09-21T03:19:25+05:30</updated>
    <id>http://goyalankit.github.io/notes-blog/blog/2014/09/21/scheduling-basics</id>
    <content type="html"><![CDATA[<h2>Scheduling policy in Linux Kernel</h2>

<p>source: <a href="http://idak.gop.edu.tr/esmeray/UnderStandingKernel.pdf">Understanding the Linux Kernel</a>, Chapter 7</p>

<p>CPU time is divided into slices, one for each runnable process. Time sharing relies on timer interrupts and is thus transparent to processes.</p>

<p>For scheduling processes are traditionally classified as: I/O-bound or CPU-bound.</p>

<p>Another classification distinguishes three kind of processes:</p>

<ol>
<li><p><strong>Interactive Processes</strong>: Constantly interact with users, these programs spend lot of time waiting for keypress and should be woekn up quickly when input is received. e.g., shell, text editors, etc.</p></li>
<li><p><strong>Batch Processes:</strong> Not much user interaction and often run in background. Often penalized by the scheduler. e.g., compilers, database search engines and scientific computations.</p></li>
<li><p><strong>Real-time process:</strong> Stringent scheduling requirements, should never be blocked due to low priority processes. e.g., video and sound applications, controllers collecting data from sensors.</p></li>
</ol>


<h2>Process Preemption:</h2>

<p>Linux processes are preemptable (both in Kernel or User mode). When a process enters TASK_RUNNING state, the kernel checks if its dynamic priority is greater than the priority of the currently running process. If it is, execution of <code>current</code> is interrupted and scheduler is invoked to select another process.</p>

<p>e.g., 2 programs - text editor and compiler. Compiler is running, user presses a key, an interrupt is raised and the kernel wakes up the editor process. Kernel also checks that the dynamic priority of text editor program is higher than compiler, so it sets <code>TIF_NEED_RESCHED</code> for the current process (thus forcing the scheduler when interrupt handler reutrns.). As the interrupt handler returns, scheduler is invoked and the context switch happens. Note: preempted process is not suspended, it remains in TASK_RUNNING state.</p>

<h2>Quantum size</h2>

<p>If quantum is too short, context switches get expensive. If it&rsquo;s too long, it may make system unresponsive. e.g., two users launch process together, one of them is interactive and other is batch. If scheduler schedules batch first initially, other process becomes unresponsive.</p>

<p><em>Note that too long a quantum doesn&rsquo;t degrades the response time of interative processes in general due to process preemption.</em></p>

<p>The choice of quantum is usually a compromise and Linux chooses a duration as long as possible, while keep a good response time.</p>
]]></content>
  </entry>
  
</feed>
